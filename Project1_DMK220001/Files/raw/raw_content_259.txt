Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
In the last tutorial, we learned about Python exceptions.
We know that exceptions abnormally terminate the execution of a program.
Since exceptions abnormally terminate the execution of a program, it is important to handle exceptions.
In Python, we use the try...except block to handle exceptions.
The try...except block is used to handle exceptions in Python.
Here's the syntax of try...except block: Here, we have placed the code that might generate an exception inside the try block.
Every try block is followed by an except block.
When an exception occurs, it is caught by the except block.
The except block cannot be used without the try block.
In the example, we are trying to divide a number by 0.
Here, this code generates an exception.
To handle the exception, we have put the code, result = numerator/denominator inside the try block.
Now when an exception occurs, the rest of the code inside the try block is skipped.
The except block catches the exception and statements inside the except block are executed.
If none of the statements in the try block generates an exception, the except block is skipped.
For each try block, there can be zero or more except blocks.
Multiple except blocks allow us to handle each exception differently.
The argument type of each except block indicates the type of exception that can be handled by it.
For example, In this example, we have created a list named even_numbers.
Since the list index starts from 0, the last element of the list is at index 3.
Notice the statement, Here, we are trying to access a value to the index 5.
Hence, IndexError exception occurs.
When the IndexError exception occurs in the try block, In some situations, we might want to run a certain block of code if the code block inside try runs without any errors.
For these cases, you can use the optional else keyword with the try statement.
Let's look at an example: Output If we pass an odd number: If we pass an even number, the reciprocal is computed and displayed.
However, if we pass 0, we get ZeroDivisionError as the code block inside else is not handled by preceding except.
Here, the assert statement in the code checks that num is an even number; if num is odd, it raises an AssertionError, triggering the except block.
Note: Exceptions in the else clause are not handled by the preceding except clauses.
In Python, the finally block is always executed no matter whether there is an exception or not.
The finally block is optional.
And, for each try block, there can be only one finally block.
Let's see an example, Output In the above example, we are dividing a number by 0 inside the try block.
Here, this code generates an exception.
The exception is caught by the except block.
And, then the finally block is executed.
Also Read: Sorry about that.
Python Tutorial Python Custom Exceptions Python Tutorial Python Exceptions Python Tutorial List of Keywords in Python Python Library Python String index() Â© Parewa Labs Pvt.
Ltd. All rights reserved.