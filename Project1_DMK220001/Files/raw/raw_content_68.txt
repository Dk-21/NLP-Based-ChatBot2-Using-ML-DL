Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
AVL tree is a self-balancing binary search tree in which each node maintains extra information called a balance factor whose value is either -1, 0 or +1.
AVL tree got its name after its inventor Georgy Adelson-Velsky and Landis.
Balance factor of a node in an AVL tree is the difference between the height of the left subtree and that of the right subtree of that node.
Balance Factor = (Height of Left Subtree - Height of Right Subtree) or (Height of Right Subtree - Height of Left Subtree) The self balancing property of an avl tree is maintained by the balance factor.
The value of balance factor should always be -1, 0 or +1.
An example of a balanced avl tree is:  Various operations that can be performed on an AVL tree are: In rotation operation, the positions of the nodes of a subtree are interchanged.
There are two types of rotations: In left-rotation, the arrangement of the nodes on the right is transformed into the arrangements on the left node.
Algorithm In left-rotation, the arrangement of the nodes on the left is transformed into the arrangements on the right node.
In left-right rotation, the arrangements are first shifted to the left and then to the right.
In right-left rotation, the arrangements are first shifted to the right and then to the left.
A newNode is always inserted as a leaf node with balance factor equal to 0.
A node is always deleted as a leaf node.
After deleting a node, the balance factors of the nodes get changed.
In order to rebalance the balance factor, suitable rotations are performed.
Sorry about that.
DS & Algorithms Perfect Binary Tree DS & Algorithms Full Binary Tree DS & Algorithms Balanced Binary Tree DS & Algorithms Tree Traversal - inorder, preorder and postorder Â© Parewa Labs Pvt.
Ltd. All rights reserved.