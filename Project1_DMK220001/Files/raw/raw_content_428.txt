Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
The classmethod() method returns a class method for the given function.
The syntax of classmethod() method is: classmethod() is considered un-Pythonic so in newer Python versions, you can use the @classmethod decorator for classmethod definition.
The syntax is: classmethod() method takes a single parameter: classmethod() method returns a class method for the given function.
A class method is a method that is bound to a class rather than its object.
It doesn't require creation of a class instance, much like static method.
The difference between a static method and a class method is: The class method can be called both by the class and its object.
But no matter what, the class method is always attached to a class with the first argument as the class itself cls.
Output Here, we have a class Person, with a member variable age assigned to 25.
We also have a function printAge that takes a single parameter cls and not self we usually take.
cls accepts the class Person as a parameter rather than Person's object/instance.
Now, we pass the method Person.printAge as an argument to the function classmethod.
This converts the method to a class method so that it accepts the first parameter as a class (i.e.
Person).
In the final line, we call printAge without creating a Person object like we do for static methods.
This prints the class variable age.
Factory methods are those methods that return a class object (like constructor) for different use cases.
It is similar to function overloading in C++ .
Since, Python doesn't have anything as such, class methods and static methods are used.
Output Here, we have two class instance creator, a constructor and a fromBirthYear method.
The constructor takes normal parameters name and age.
While, fromBirthYear takes class, name and birthYear, calculates the current age by subtracting it with the current year and returns the class instance.
The fromBirthYear method takes Person class (not Person object) as the first parameter cls and returns the constructor by calling cls(name, date.today().year - birthYear), which is equivalent to Person(name, date.today().year - birthYear) Before the method, we see @classmethod.
This is called a decorator for converting fromBirthYear to a class method as classmethod().
Whenever you derive a class from implementing a factory method as a class method, it ensures correct instance creation of the derived class.
You can create a static method for the above example but the object it creates, will always be hard coded as Base class.
But, when you use a class method, it creates the correct instance of the derived class.
Output Here, using a static method to create a class instance wants us to hardcode the instance type during creation.
This clearly causes a problem when inheriting Person to Man.
fromFathersAge method doesn't return a Man object but its base class Person's object.
This violates the OOP paradigm.
Using a class method as fromBirthYear can ensure the OOP-ness of the code since it takes the first parameter as the class itself and calls its factory method.
Also Read:
 Sorry about that.
Python Library Python staticmethod() Python Library Python setattr() Python Library Python getattr() Python Library Python property() Â© Parewa Labs Pvt.
Ltd. All rights reserved.