Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
A Regular Expression (RegEx) is a sequence of characters that defines a search pattern.
For example, The above code defines a RegEx pattern.
The pattern is: any five letter string starting with a and ending with s. A pattern defined using RegEx can be used to match against a string.
Python has a module named re to work with RegEx.
Here's an example: Here, we used re.match() function to search pattern within the test_string.
The method returns a match object if the search is successful.
If not, it returns None.
There are other several functions defined in the re module to work with RegEx.
Before we explore that, let's learn about regular expressions themselves.
If you already know the basics of RegEx, jump to Python RegEx.
To specify regular expressions, metacharacters are used.
In the above example, ^ and $ are metacharacters.
Metacharacters are characters that are interpreted in a special way by a RegEx engine.
Here's a list of metacharacters: [] .
^ $ * + ?
{} () \ | [] - Square brackets Square brackets specifies a set of characters you wish to match.
Here, [abc] will match if the string you are trying to match contains any of the a, b or c. You can also specify a range of characters using - inside square brackets.
You can complement (invert) the character set by using caret ^ symbol at the start of a square-bracket. . - Period A period matches any single character (except newline '\n').
^ - Caret The caret symbol ^ is used to check if a string starts with a certain character.
$ - Dollar The dollar symbol $ is used to check if a string ends with a certain character.
* - Star The star symbol * matches zero or more occurrences of the pattern left to it.
+ - Plus The plus symbol + matches one or more occurrences of the pattern left to it. ?
- Question Mark The question mark symbol ?
matches zero or one occurrence of the pattern left to it.
{} - Braces Consider this code: {n,m}.
This means at least n, and at most m repetitions of the pattern left to it.
Let's try one more example.
This RegEx [0-9]{2, 4} matches at least 2 digits but not more than 4 digits | - Alternation Vertical bar | is used for alternation (or operator).
Here, a|b match any string that contains either a or b () - Group Parentheses () is used to group sub-patterns.
For example, (a|b|c)xz match any string that matches either a or b or c followed by xz \ - Backslash Backlash \ is used to escape various characters including all metacharacters.
For example, \$a match if a string contains $ followed by a.
Here, $ is not interpreted by a RegEx engine in a special way.
If you are unsure if a character has special meaning or not, you can put \ in front of it.
This makes sure the character is not treated in a special way.
Special Sequences Special sequences make commonly used patterns easier to write.
Here's a list of special sequences: \A - Matches if the specified characters are at the start of a string.
\b - Matches if the specified characters are at the beginning or end of a word.
\B - Opposite of \b.
Matches if the specified characters are not at the beginning or end of a word.
\d - Matches any decimal digit.
Equivalent to [0-9] \D - Matches any non-decimal digit.
Equivalent to [^0-9] \s - Matches where a string contains any whitespace character.
Equivalent to [ \t\n\r\f\v].
\S - Matches where a string contains any non-whitespace character.
Equivalent to [^ \t\n\r\f\v].
\w - Matches any alphanumeric character (digits and alphabets).
Equivalent to [a-zA-Z0-9_].
By the way, underscore _ is also considered an alphanumeric character.
\W - Matches any non-alphanumeric character.
Equivalent to [^a-zA-Z0-9_] \Z - Matches if the specified characters are at the end of a string.
Tip: To build and test regular expressions, you can use RegEx tester tools such as regex101.
This tool not only helps you in creating regular expressions, but it also helps you learn it.
Now you understand the basics of RegEx, let's discuss how to use RegEx in your Python code.
Python has a module named re to work with regular expressions.
To use it, we need to import the module.
The module defines several functions and constants to work with RegEx.
The re.findall() method returns a list of strings containing all matches.
If the pattern is not found, re.findall() returns an empty list.
The re.split method splits the string where there is a match and returns a list of strings where the splits have occurred.
If the pattern is not found, re.split() returns a list containing the original string.
You can pass maxsplit argument to the re.split() method.
It's the maximum number of splits that will occur.
By the way, the default value of maxsplit is 0; meaning all possible splits.
The syntax of re.sub() is: The method returns a string where matched occurrences are replaced with the content of replace variable.
If the pattern is not found, re.sub() returns the original string.
You can pass count as a fourth parameter to the re.sub() method.
If omited, it results to 0.
This will replace all occurrences.
The re.subn() is similar to re.sub() except it returns a tuple of 2 items containing the new string and the number of substitutions made.
The re.search() method takes two arguments: a pattern and a string.
The method looks for the first location where the RegEx pattern produces a match with the string.
If the search is successful, re.search() returns a match object; if not, it returns None.
Here, match contains a match object.
You can get methods and attributes of a match object using dir() function.
Some of the commonly used methods and attributes of match objects are: The group() method returns the part of the string where there is a match.
Here, match variable contains a match object.
Our pattern (\d{3}) (\d{2}) has two subgroups (\d{3}) and (\d{2}).
You can get the part of the string of these parenthesized subgroups.
Here's how: The start() function returns the index of the start of the matched substring.
Similarly, end() returns the end index of the matched substring.
The span() function returns a tuple containing start and end index of the matched part.
The re attribute of a matched object returns a regular expression object.
Similarly, string attribute returns the passed string.
We have covered all commonly used methods defined in the re module.
If you want to learn more, visit Python 3 re module.
When r or R prefix is used before a regular expression, it means raw string.
For example, '\n' is a new line whereas r'\n' means two characters: a backslash \ followed by n. Backlash \ is used to escape various characters including all metacharacters.
However, using r prefix makes \ treat as a normal character.
Sorry about that.
Python Tutorial Python strptime() Python Library Python String title() Python Library Python String split() Python Library Python String count() Â© Parewa Labs Pvt.
Ltd. All rights reserved.