Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
We are going to exclusively use the csv module built into Python for this task.
But first, we will have to import the module as : We have already covered the basics of how to use the csv module to read and write into CSV files.
If you don't have any idea on using the csv module, check out our tutorial on Python CSV: Read and Write CSV files Let's look at a basic example of using csv.reader() to refresh your existing knowledge.
Suppose we have a CSV file with the following entries: We can read the contents of the file with the following program: Output  Here, we have opened the innovators.csv file in reading mode using open() function.
To learn more about opening files in Python, visit: Python File Input/Output Then, the csv.reader() is used to read the file, which returns an iterable reader object.
The reader object is then iterated using a for loop to print the contents of each row.
Now, we will look at CSV files with different formats.
We will then learn how to customize the csv.reader() function to read them.
By default, a comma is used as a delimiter in a CSV file.
However, some CSV files can use delimiters other than a comma.
Few popular ones are | and \t.
Suppose the innovators.csv file in Example 1 was using tab as a delimiter.
To read the file, we can pass an additional delimiter parameter to the csv.reader() function.
Let's take an example.
Output  As we can see, the optional parameter delimiter = '\t' helps specify the reader object that the CSV file we are reading from, has tabs as a delimiter.
Some CSV files can have a space character after a delimiter.
When we use the default csv.reader() function to read these CSV files, we will get spaces in the output as well.
To remove these initial spaces, we need to pass an additional parameter called skipinitialspace.
Let us look at an example: Suppose we have a CSV file called people.csv with the following content: We can read the CSV file as follows: Output  The program is similar to other examples but has an additional skipinitialspace parameter which is set to True.
This allows the reader object to know that the entries have initial whitespace.
As a result, the initial spaces that were present after a delimiter is removed.
Some CSV files can have quotes around each or some of the entries.
Let's take quotes.csv as an example, with the following entries: Using csv.reader() in minimal mode will result in output with the quotation marks.
In order to remove them, we will have to use another optional parameter called quoting.
Let's look at an example of how to read the above program.
Output  As you can see, we have passed csv.QUOTE_ALL to the quoting parameter.
It is a constant defined by the csv module.
csv.QUOTE_ALL specifies the reader object that all the values in the CSV file are present inside quotation marks.
There are 3 other predefined constants you can pass to the quoting parameter: Notice in Example 4 that we have passed multiple parameters (quoting and skipinitialspace) to the csv.reader() function.
This practice is acceptable when dealing with one or two files.
But it will make the code more redundant and ugly once we start working with multiple CSV files with similar formats.
As a solution to this, the csv module offers dialect as an optional parameter.
Dialect helps in grouping together many specific formatting patterns like delimiter, skipinitialspace, quoting, escapechar into a single dialect name.
It can then be passed as a parameter to multiple writer or reader instances.
Suppose we have a CSV file (office.csv) with the following content: The CSV file has initial spaces, quotes around each entry, and uses a | delimiter.
Instead of passing three individual formatting patterns, let's look at how to use dialects to read this file.
Output  From this example, we can see that the csv.register_dialect() function is used to define a custom dialect.
It has the following syntax: The custom dialect requires a name in the form of a string.
Other specifications can be done either by passing a sub-class of Dialect class, or by individual formatting patterns as shown in the example.
While creating the reader object, we pass dialect='myDialect' to specify that the reader instance must use that particular dialect.
The advantage of using dialect is that it makes the program more modular.
Notice that we can reuse 'myDialect' to open other files without having to re-specify the CSV format.
The objects of a csv.DictReader() class can be used to read a CSV file as a dictionary.
Suppose we have a CSV file (people.csv) with the following entries: Let's see how csv.DictReader() can be used.
Output  As we can see, the entries of the first row are the dictionary keys.
And, the entries in the other rows are the dictionary values.
Here, csv_file is a csv.DictReader() object.
The object can be iterated over using a for loop.
The csv.DictReader() returned an OrderedDict type for each row.
That's why we used dict() to convert each row to a dictionary.
Notice that we have explicitly used the dict() method to create dictionaries inside the for loop.
Note: Starting from Python 3.8, csv.DictReader() returns a dictionary for each row, and we do not need to use dict() explicitly.
The full syntax of the csv.DictReader() class is: To learn more about it in detail, visit: Python csv.DictReader() class The Sniffer class is used to deduce the format of a CSV file.
The Sniffer class offers two methods: An optional delimiters parameter can be passed as a string containing possible valid delimiter characters.
Let's look at an example of using these functions: Suppose we have a CSV file (office.csv) with the following content: Let's look at how we can deduce the format of this file using csv.Sniffer() class: Output  As you can see, we read only 64 characters of office.csv and stored it in the sample variable.
This sample was then passed as a parameter to the Sniffer().has_header() function.
It deduced that the first row must have column headers.
Thus, it returned True which was then printed out.
Similarly, sample was also passed to the Sniffer().sniff() function.
It returned all the deduced parameters as a Dialect subclass which was then stored in the deduced_dialect variable.
Later, we re-opened the CSV file and passed the deduced_dialect variable as a parameter to csv.reader().
It was correctly able to predict delimiter, quoting and skipinitialspace parameters in the office.csv file without us explicitly mentioning them.
Note: The csv module can also be used for other file extensions (like: .txt) as long as their contents are in proper structure.
Recommended Reading: Write to CSV Files in Python Sorry about that.
Python Tutorial Writing CSV files in Python Python Tutorial Working with CSV files in Python Python Tutorial Python CSV: Read and Write CSV Files  Python Library Python open() Â© Parewa Labs Pvt.
Ltd. All rights reserved.