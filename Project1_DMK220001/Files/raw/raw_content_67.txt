Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
Binary search tree is a data structure that quickly allows us to maintain a sorted list of numbers.
The properties that separate a binary search tree from a regular binary tree is The binary tree on the right isn't a binary search tree because the right subtree of the node "3" contains a value smaller than it.
There are two basic operations that you can perform on a binary search tree: The algorithm depends on the property of BST that if each left subtree has values below root and each right subtree has values above the root.
If the value is below the root, we can say for sure that the value is not in the right subtree; we need to only search in the left subtree and if the value is above the root, we can say for sure that the value is not in the left subtree; we need to only search in the right subtree.
Algorithm: Let us try to visualize this with a diagram.
If the value is found, we return the value so that it gets propagated in each recursion step as shown in the image below.
If you might have noticed, we have called return search(struct node*) four times.
When we return either the new node or NULL, the value gets returned again and again until search(root) returns the final result.
If the value is not found, we eventually reach the left or right child of a leaf node which is NULL and it gets propagated and returned.
Inserting a value in the correct position is similar to searching because we try to maintain the rule that the left subtree is lesser than root and the right subtree is larger than root.
We keep going to either right subtree or left subtree depending on the value and when we reach a point left or right subtree is null, we put the new node there.
Algorithm: The algorithm isn't as simple as it looks.
Let's try to visualize how we add a number to an existing BST.
We have attached the node but we still have to exit from the function without doing any damage to the rest of the tree.
This is where the return node; at the end comes in handy.
In the case of NULL, the newly created node is returned and attached to the parent node, otherwise the same node is returned without any change as we go up until we return to the root.
This makes sure that as we move back up the tree, the other node connections aren't changed.
There are three cases for deleting a node from a binary search tree.
In the first case, the node to be deleted is the leaf node.
In such a case, simply delete the node from the tree.
In the second case, the node to be deleted lies has a single child node.
In such a case follow the steps below: In the third case, the node to be deleted has two children.
In such a case follow the steps below: Here, n is the number of nodes in the tree.
The space complexity for all the operations is O(n).
Sorry about that.
DS & Algorithms Tree Traversal - inorder, preorder and postorder DS & Algorithms Perfect Binary Tree DS & Algorithms Full Binary Tree DS & Algorithms Binary Tree Â© Parewa Labs Pvt.
Ltd. All rights reserved.