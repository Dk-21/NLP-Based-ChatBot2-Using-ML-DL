Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
A fibonacci heap is a data structure that consists of a collection of trees which follow min heap or max heap property.
We have already discussed min heap and max heap property in the Heap Data Structure article.
These two properties are the characteristics of the trees present on a fibonacci heap.
In a fibonacci heap, a node can have more than two children or no children at all.
Also, it has more efficient heap operations than that supported by the binomial and binary heaps.
The fibonacci heap is called a fibonacci heap because the trees are constructed in a way such that a tree of order n has at least Fn+2 nodes in it, where Fn+2 is the (n + 2)th Fibonacci number.
Important properties of a Fibonacci heap are: The roots of all the trees are linked together for faster access.
The child nodes of a parent node are connected to each other through a circular doubly linked list as shown below.
There are two main advantages of using a circular doubly linked list.
Algorithm Inserting a node into an already existing heap follows the steps below.
The minimum element is always given by the min pointer.
Union of two fibonacci heaps consists of following steps.
It is the most important operation on a fibonacci heap.
In this operation, the node with minimum value is removed from the heap and the tree is re-adjusted.
The following steps are followed: An implementation of the above steps can be understood in the example below.
These are the most important operations which are discussed in Decrease Key and Delete Node Operations.
Sorry about that.
DS & Algorithms Decrease Key and Delete Node Operations on a Fibonacci Heap DS & Algorithms Perfect Binary Tree DS & Algorithms Complete Binary Tree DS & Algorithms Full Binary Tree Â© Parewa Labs Pvt.
Ltd. All rights reserved.