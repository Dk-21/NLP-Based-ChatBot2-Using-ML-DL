Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
Depth first Search or Depth first traversal is a recursive algorithm for searching all the vertices of a graph or tree data structure.
Traversal means visiting all the nodes of a graph.
A standard DFS implementation puts each vertex of the graph into one of two categories: The purpose of the algorithm is to mark each vertex as visited while avoiding cycles.
The DFS algorithm works as follows: Let's see how the Depth First Search algorithm works with an example.
We use an undirected graph with 5 vertices.
We start from vertex 0, the DFS algorithm starts by putting it in the Visited list and putting all its adjacent vertices in the stack.
Next, we visit the element at the top of stack i.e.
1 and go to its adjacent nodes.
Since 0 has already been visited, we visit 2 instead.
Vertex 2 has an unvisited adjacent vertex in 4, so we add that to the top of the stack and visit it.
After we visit the last element 3, it doesn't have any unvisited adjacent nodes, so we have completed the Depth First Traversal of the graph.
The pseudocode for DFS is shown below.
In the init() function, notice that we run the DFS function on every node.
This is because the graph might have two different disconnected parts so to make sure that we cover every vertex, we can also run the DFS algorithm on every node.
The code for the Depth First Search Algorithm with an example is shown below.
The code has been simplified so that we can focus on the algorithm rather than other details.
The time complexity of the DFS algorithm is represented in the form of O(V + E), where V is the number of nodes and E is the number of edges.
The space complexity of the algorithm is O(V).
Sorry about that.
DS & Algorithms Breadth first search DS & Algorithms Adjacency List DS & Algorithms Strongly Connected Components DS & Algorithms Graph Data Stucture Â© Parewa Labs Pvt.
Ltd. All rights reserved.