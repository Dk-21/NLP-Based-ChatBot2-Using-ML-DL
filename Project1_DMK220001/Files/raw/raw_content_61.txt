Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
Traversing a tree means visiting every node in the tree.
You might, for instance, want to add all the values in the tree or find the largest one.
For all these operations, you will need to visit each node of the tree.
Linear data structures like arrays, stacks, queues, and linked list have only one way to read the data.
But a hierarchical data structure like a tree can be traversed in different ways.
Let's think about how we can read the elements of the tree in the image shown above.
Starting from top, Left to right Starting from bottom, Left to right Although this process is somewhat easy, it doesn't respect the hierarchy of the tree, only the depth of the nodes.
Instead, we use traversal methods that take into account the basic structure of a tree i.e.
The struct node pointed to by left and right might have other left and right children so we should think of them as sub-trees instead of sub-nodes.
According to this structure, every tree is a combination of Remember that our goal is to visit each node, so we need to visit all the nodes in the subtree, visit the root node and visit all the nodes in the right subtree as well.
Depending on the order in which we do this, there can be three types of traversal.
Let's visualize in-order traversal.
We start from the root node.
We traverse the left subtree first.
We also need to remember to visit the root node and the right subtree when this tree is done.
Let's put all this in a stack so that we remember.
Now we traverse to the subtree pointed on the TOP of the stack.
Again, we follow the same rule of inorder After traversing the left subtree, we are left with Since the node "5" doesn't have any subtrees, we print it directly.
After that we print its parent "12" and then the right child "6".
Putting everything on a stack was helpful because now that the left-subtree of the root node has been traversed, we can print it and go to the right subtree.
After going through all the elements, we get the inorder traversal as We don't have to create the stack ourselves because recursion maintains the correct order for us.
Sorry about that.
DS & Algorithms Binary Tree DS & Algorithms Full Binary Tree DS & Algorithms Perfect Binary Tree DS & Algorithms Balanced Binary Tree Â© Parewa Labs Pvt.
Ltd. All rights reserved.