Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
B-tree is a special type of self-balancing search tree in which each node can contain more than one key and can have more than two children.
It is a generalized form of the binary search tree.
It is also known as a height-balanced m-way tree.
The need for B-tree arose with the rise in the need for lesser time in accessing physical storage media like a hard disk.
The secondary storage devices are slower with a larger capacity.
There was a need for such types of data structures that minimize the disk access.
Other data structures such as a binary search tree, avl tree, red-black tree, etc can store only one key in one node.
If you have to store a large number of keys, then the height of such trees becomes very large, and the access time increases.
However, B-tree can store many keys in a single node and can have multiple child nodes.
This decreases the height significantly allowing faster disk accesses.
Searching for an element in a B-tree is the generalized form of searching an element in a Binary Search Tree.
The following steps are followed.
To learn more about different B-tree operations, please visit  Worst case Time complexity: Θ(log n) Average case Time complexity: Θ(log n) Best case Time complexity: Θ(log n) Average case Space complexity: Θ(n) Worst case Space complexity: Θ(n) Sorry about that.
DS & Algorithms Insertion into a B-tree DS & Algorithms Deletion from a B-tree DS & Algorithms Binary Search Tree(BST) DS & Algorithms Perfect Binary Tree © Parewa Labs Pvt.
Ltd. All rights reserved.