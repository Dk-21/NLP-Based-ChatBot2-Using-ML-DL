Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
It differs from the minimum spanning tree because the shortest distance between two vertices might not include all the vertices of the graph.
Dijkstra's Algorithm works on the basis that any subpath B -> D of the shortest path A -> D between vertices A and D is also the shortest path between vertices B and D. Djikstra used this property in the opposite direction i.e we overestimate the distance of each vertex from the starting vertex.
Then we visit each node and its neighbors to find the shortest subpath to those neighbors.
The algorithm uses a greedy approach in the sense that we find the next best solution hoping that the end result is the best solution for the whole problem.
It is easier to start with an example and then think about the algorithm.
We need to maintain the path distance of every vertex.
We can store that in an array of size v, where v is the number of vertices.
We also want to be able to get the shortest path, not only know the length of the shortest path.
For this, we map each vertex to the vertex that last updated its path length.
Once the algorithm is over, we can backtrack from the destination vertex to the source vertex to find the path.
A minimum priority queue can be used to efficiently receive the vertex with least path distance.
The implementation of Dijkstra's Algorithm in C++ is given below.
The complexity of the code can be improved, but the abstractions are convenient to relate the code with the algorithm.
Time Complexity: O(E Log V) where, E is the number of edges and V is the number of vertices.
Space Complexity: O(V) Sorry about that.
DS & Algorithms Graph Data Stucture DS & Algorithms Bellman Ford's Algorithm DS & Algorithms Adjacency List DS & Algorithms Depth First Search (DFS) Â© Parewa Labs Pvt.
Ltd. All rights reserved.