Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
Radix sort is a sorting algorithm that sorts the elements by first grouping the individual digits of the same place value.
Then, sort the elements according to their increasing/decreasing order.
Suppose, we have an array of 8 elements.
First, we will sort elements based on the value of the unit place.
Then, we will sort elements based on the value of the tenth place.
This process goes on until the last significant place.
Let the initial array be [121, 432, 564, 23, 1, 45, 788].
It is sorted according to radix sort as shown in the figure below.
Please go through the counting sort before reading this article because counting sort is used as an intermediate sort in radix sort.
Since radix sort is a non-comparative algorithm, it has advantages over comparative sorting algorithms.
For the radix sort that uses counting sort as an intermediate stable sort, the time complexity is O(d(n+k)).
Here, d is the number cycle and O(n+k) is the time complexity of counting sort.
Thus, radix sort has linear time complexity which is better than O(nlog n) of comparative sorting algorithms.
If we take very large digit numbers or the number of other bases like 32-bit and 64-bit numbers then it can perform in linear time however the intermediate sort takes large space.
This makes radix sort space inefficient.
This is the reason why this sort is not used in software libraries.
Radix sort is implemented in Sorry about that.
DS & Algorithms Counting Sort Algorithm DS & Algorithms Insertion Sort Algorithm DS & Algorithms Sorting Algorithm DS & Algorithms Selection Sort Algorithm Â© Parewa Labs Pvt.
Ltd. All rights reserved.