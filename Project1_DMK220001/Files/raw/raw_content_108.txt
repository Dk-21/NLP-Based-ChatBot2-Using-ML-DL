Try Programiz PRO Learn Python practically 
                and Get Certified.
Learn Python practically 
                        and Get Certified.
Rabin-Karp algorithm is an algorithm used for searching/matching patterns in the text using a hash function.
Unlike Naive string matching algorithm, it does not travel through every character in the initial phase rather it filters the characters that do not match and then performs the comparison.
A hash function is a tool to map a larger input value to a smaller output value.
This output value is called the hash value.
A sequence of characters is taken and checked for the possibility of the presence of the required string.
If the possibility is found then, character matching is performed.
Let us understand the algorithm with the following steps: In the calculation above, choose a prime number (here, 13) in such a way that we can perform all the calculations with single-precision arithmetic.
The reason for calculating the modulus is given below.
In order to optimize this process, we make use of the previous hash value in the following way.
When the hash value of the pattern matches with the hash value of a window of the text but the window is not the actual pattern then it is called a spurious hit.
Spurious hit increases the time complexity of the algorithm.
In order to minimize spurious hit, we use modulus.
It greatly reduces the spurious hit.
The average case and best case complexity of Rabin-Karp algorithm is O(m + n) and the worst case complexity is O(mn).
The worst-case complexity occurs when spurious hits occur a number for all the windows.
Sorry about that.
DS & Algorithms Why Learn Data Structures and Algorithms?
DS & Algorithms Hashing DS & Algorithms Floyd-Warshall Algorithm DS & Algorithms Linear Search Â© Parewa Labs Pvt.
Ltd. All rights reserved.